# netdata python.d.plugin configuration for logparser
#
# This file is in YaML format. Generally the format is:
#
# name: value
#
# There are 2 sections:
#  - global variables
#  - one or more JOBS
#
# JOBS allow you to collect values from multiple sources.
# Each source will have its own set of charts.
#
# JOB parameters have to be indented (using spaces only, example below).

# ----------------------------------------------------------------------
# Global Variables
# These variables set the defaults for all JOBs, however each JOB
# may define its own, overriding the defaults.

# update_every sets the default data collection frequency.
# If unset, the python.d.plugin default is used.
# update_every: 1

# priority controls the order of charts at the netdata dashboard.
# Lower numbers move the charts towards the top of the page.
# If unset, the default for python.d.plugin is used.
# priority: 60000

# penalty indicates whether to apply penalty to update_every in case of failures.
# Penalty will increase every 5 failed updates in a row. Maximum penalty is 10 minutes.
# penalty: yes

# autodetection_retry sets the job re-check interval in seconds.
# The job is not deleted if check fails.
# Attempts to start the job are made once every autodetection_retry.
# This feature is disabled by default.
# autodetection_retry: 0

# chart_cleanup sets the default chart cleanup interval in iterations.
# A chart is marked as obsolete if it has not been updated
# 'chart_cleanup' iterations in a row.
# When a plugin sends the obsolete flag, the charts are not deleted
# from netdata immediately.
# They will be hidden immediately (not offered to dashboard viewer,
# streamed upstream and archived to backends) and deleted one hour
# later (configurable from netdata.conf).
# chart_cleanup: 10

#This module is able to monitor an application specific log file and then create a chart based on occurrences of a log line (like amount of occurrences in a day, or a line graph of when the occurrences happen).It has no limitation to have multi dimension and multi charts.
#
# Config patterns
#
#```yaml
#chart_name:                        # the JOB's name as it will appear at the
#                                   # dashboard (by default is the job_name)
#    log_path: path/log/file        # the path to application log file
#    dimensions:                    # chart name is declared here
#      dimension: 'regex=pattern'   # filter with regex
#      dimension: 'string=string'   # filter with string
#```
#
#Above config show how to define your charts and how to fetching metrics from custom log files.
# We have two different type for search
# 1: string 
# 2: regexp
#For each dimension in each chart must one matcher be written in order to fetch those matches from that log file.It allows us to define whatever charts we want to show in dashboard.
#
# -----------------------------------------------------------------------------------------------
#A final config for more than one chart and more than one dimension could be something like this
#
#```yaml
#
#chart1_name: 
#    log_path: /path/logs/log.file
#    dimensions:
#      dimension_name1: 'string=GET'
#      dimension_name2: 'string=POST'
#      dimension_name3: 'string=PATCH'
#chart2_name:
#    log_path: /path/logs/log2.file
#    dimensions:
#      dimension_name1: 'regexp=[A-Z]+'
#      dimension_name2: 'regexp=[A-Z]+'
#      dimension_name3: 'regexp=[A-Z]+'
#
#```

