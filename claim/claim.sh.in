#!/usr/bin/env bash
# netdata
# real-time performance and health monitoring, done right!
# (C) 2017 Costa Tsaousis <costa@tsaousis.gr>
# SPDX-License-Identifier: GPL-3.0-or-later

# Exit code 0 - Success
# Exit code 1 - Unknown argument
# Exit code 2 - Problems with claiming working directory
# Exit code 3 - Missing dependencies

if ! command -v curl >/dev/null 2>&1 && ! command -v wget >/dev/null 2>&1 ; then
	echo >&2 "I need curl or wget to proceed, but neither is available on this system."
	exit 3
fi
if ! command -v openssl >/dev/null 2>&1 ; then
	echo >&2 "I need openssl to proceed, but neither is available on this system."
	exit 3
fi


# -----------------------------------------------------------------------------
# defaults to allow running this script by hand

[ -z "${NETDATA_USER_CONFIG_DIR}" ] && NETDATA_USER_CONFIG_DIR="@configdir_POST@"
MACHINE_GUID_FILE="@registrydir_POST@/netdata.public.unique.id"
CLAIMING_DIR="${NETDATA_USER_CONFIG_DIR}/claim.d"
TOKEN="unknown"
URL_BASE="unknown"
ID="unknown"
ROOMS=""
HOSTNAME=$(hostname)

# get the MACHINE_GUID by default
if [ -r "${MACHINE_GUID_FILE}" ]; then
	ID="$(cat "${MACHINE_GUID_FILE}")"
fi

for arg in "$@"
do
	case $arg in
		-token=*) TOKEN=${arg:7} ;;
		-url=*) URL_BASE=${arg:5} ;;
		-id=*) ID=${arg:4} ;;
		-rooms=*) ROOMS=${arg:7} ;;
		-hostname=*) HOSTNAME=${arg:10} ;;
		*)  echo "Unknown argument ${arg}"
		    exit 1 ;;
	esac
	shift 1
done

echo "Token: $TOKEN"
echo "Url: $URL_BASE"
echo "Id: $ID"
echo "ROOMS: $ROOMS"
echo "HOSTNAME: $HOSTNAME"

# create the claiming directory for this user
if [ ! -d "${CLAIMING_DIR}" ] ; then
	mkdir -p "${CLAIMING_DIR}" && chmod 0640 "${CLAIMING_DIR}"
	if [ $? -ne 0 ] ; then
		echo "Failed to create claiming working directory ${CLAIMING_DIR}"
		exit 2
	fi
fi
if [ ! -w "${CLAIMING_DIR}" ] ; then
	echo "No write permission in claiming working directory ${CLAIMING_DIR}"
	exit 2
fi

if [ ! -f "${CLAIMING_DIR}/private.pem" ] ; then
	echo "Generating private/public key for the first time."
	if ! openssl genrsa -out "${CLAIMING_DIR}/private.pem" 2048 ; then
		echo "Failed to generate private/public key pair."
		exit 2
	fi
fi
if [ ! -f "${CLAIMING_DIR}/public.pem" ] ; then
	echo "Extracting public key from private key."
	if ! openssl rsa -in "${CLAIMING_DIR}/private.pem" -outform PEM -pubout -out "${CLAIMING_DIR}/public.pem" ; then
		echo "Failed to extract public key."
		exit 2
	fi
fi


TARGET_URL="https://${URL_BASE}/api/v1/workspaces/agents/${ID}"
KEY=$(cat public.pem | tr '\n' '!' | sed -e 's/!/\\n/g')
[ -n "$ROOMS" ] && ROOMS=\"$(echo "$ROOMS" | sed s'/,/", "/g')\"

curl --trace-ascii - -X PUT -d "@-" "${TARGET_URL}" <<EMBED_JSON
{
    "agent": {
        "id": "$ID",
        "hostname": "$HOSTNAME"
    },
    "token": "$TOKEN",
    "rooms" : [ $ROOMS ],
    "public_key" : "$KEY"
}
EMBED_JSON

# wget you use --ca-certificate or --ca-directory
# curl --cacert cacert.pem https://daniel.haxx.se
