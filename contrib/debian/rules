#!/usr/bin/make -f

# Find the arch we are building for, as this determines
# the location of plugins in /usr/lib
DEB_HOST_MULTIARCH ?= $(shell dpkg-architecture -qDEB_HOST_MULTIARCH)
TOP = $(CURDIR)/debian/netdata

%:
	# For jessie and beyond
	#
	dh $@ --with autoreconf,systemd

	# For wheezy or other non-systemd distributions use the following. You
	# should also see contrib/README.md which gives details of updates to
	# make to debian/control.
	#
	#dh $@ --with autoreconf

override_dh_auto_configure:
	dh_auto_configure -- --with-math --with-webdir=/var/lib/netdata/www

debian/%.postinst: debian/%.postinst.in
	sed 's/@DEB_HOST_MULTIARCH@/$(DEB_HOST_MULTIARCH)/g' $< > $@

override_dh_install: debian/netdata.postinst
	dh_install

	# Remove unneeded .keep files
	#
	find "$(TOP)" -name .keep -exec rm '{}' ';'

	# Move files that local user shouldn't be editing to /usr/share/netdata
	#
	mkdir -p "$(TOP)/usr/share/netdata"
	for D in $$(find "$(TOP)/var/lib/netdata/www/" -maxdepth 1 -type d -printf '%f '); do \
		echo Relocating $$D; \
		mv "$(TOP)/var/lib/netdata/www/$$D" "$(TOP)/usr/share/netdata/www/$$D"; \
		ln -s "/usr/share/netdata/$$D" "$(TOP)/var/lib/netdata/www/$$D"; \
	done

	# Update postinst to set correct group for www files on installation.
	# Should probably be dpkg-statoverride really, but that gets *really*
	# messy. We also set all web files in /var as conffiles so an upgrade
	# doesn't splat them.
	#
	for D in $$(find "$(TOP)/var/lib/netdata/www/" -maxdepth 1 -type f -printf '%f '); do \
		echo Updating postinst for $$D; \
		sed -i "s/^#PERMS#/chgrp netdata \/var\/lib\/netdata\/www\/$$D\n#PERMS#/g" \
			$(CURDIR)/debian/netdata.postinst; \
		echo "/var/lib/netdata/www/$$D" >> $(CURDIR)/debian/netdata.conffiles; \
	done
	sed -i "/^#PERMS#/d" $(CURDIR)/debian/netdata.postinst

	# ############################################################
	# Package Go within netdata (TBD: Package it separately)
	safe_sha256sum() {
		# Within the contexct of the installer, we only use -c option that is common between the two commands
		# We will have to reconsider if we start non-common options
		if command -v sha256sum >/dev/null 2>&1; then
			sha256sum $@
		elif command -v shasum >/dev/null 2>&1; then
			shasum -a 256 $@
		else
			fatal "I could not find a suitable checksum binary to use"
		fi
	}

	download_go() {
		url="${1}"
		dest="${2}"

		if command -v curl >/dev/null 2>&1; then
			curl -sSL --connect-timeout 10 --retry 3 "${url}" > "${dest}"
		elif command -v wget >/dev/null 2>&1; then
			wget -T 15 -O - "${url}" > "${dest}"
		else
			echo >&2
			echo >&2 "Downloading go.d plugin from '${url}' failed because of missing mandatory packages."
			echo >&2 "Either add packages or disable it by issuing '--disable-go' in the installer"
			echo >&2
			exit 1
		fi
	}

	install_go() {
		# When updating this value, ensure correct checksums in packaging/go.d.checksums
		GO_PACKAGE_VERSION="v0.7.0"
		ARCH_MAP=(
			'i386::386'
			'i686::386'
			'x86_64::amd64'
			'aarch64::arm64'
			'armv64::arm64'
			'armv6l::arm'
			'armv7l::arm'
			'armv5tel::arm'
		)

		if [ -z "${NETDATA_DISABLE_GO+x}" ]; then
			echo >&2 "Install go.d.plugin"
			ARCH=$(uname -m)
			OS=$(uname -s | tr '[:upper:]' '[:lower:]')

			for index in "${ARCH_MAP[@]}" ; do
				KEY="${index%%::*}"
				VALUE="${index##*::}"
				if [ "$KEY" = "$ARCH" ]; then
					ARCH="${VALUE}"
					break
				fi
			done
			tmp=$(mktemp -d /tmp/netdata-go-XXXXXX)
			GO_PACKAGE_BASENAME="go.d.plugin-${GO_PACKAGE_VERSION}.${OS}-${ARCH}"
			download_go "https://github.com/netdata/go.d.plugin/releases/download/${GO_PACKAGE_VERSION}/${GO_PACKAGE_BASENAME}" "${tmp}/${GO_PACKAGE_BASENAME}"
			download_go "https://github.com/netdata/go.d.plugin/releases/download/${GO_PACKAGE_VERSION}/config.tar.gz" "${tmp}/config.tar.gz"

			if [ ! -f "${tmp}/${GO_PACKAGE_BASENAME}" ] || [ ! -f "${tmp}/config.tar.gz" ] || [ ! -s "${tmp}/config.tar.gz" ] || [ ! -s "${tmp}/${GO_PACKAGE_BASENAME}" ]; then
				echo >&2 "Either check the error or consider disabling it by issuing '--disable-go' in the installer"
				echo >&2
				return 1
			fi

			grep "${GO_PACKAGE_BASENAME}\$" "packaging/go.d.checksums" > "${tmp}/sha256sums.txt" 2>/dev/null
			grep "config.tar.gz" "packaging/go.d.checksums" >> "${tmp}/sha256sums.txt" 2>/dev/null

			# Checksum validation
			if ! (cd "${tmp}" && safe_sha256sum -c "sha256sums.txt"); then

				echo >&2 "go.d plugin checksum validation failure."
				echo >&2 "Either check the error or consider disabling it by issuing '--disable-go' in the installer"
				echo >&2

				echo "go.d.plugin package files checksum validation failed."
				exit 1
			fi

			# Install files
			tar -xf "${tmp}/config.tar.gz" -C "${RPM_BUILD_ROOT}%{_libdir}/%{name}/conf.d/"
			mv "${tmp}/$GO_PACKAGE_BASENAME" "${RPM_BUILD_ROOT}%{_libexecdir}/%{name}/plugins.d/go.d.plugin"
		fi
		return 0
	}
	install_go


override_dh_installdocs:
	dh_installdocs

	find . \
		-name README.md \
		-not -path './.travis/*' \
		-not -path './debian/*' \
		-not -path './contrib/*' \
		-exec cp \
		--parents \
		--target $(TOP)/usr/share/doc/netdata/ \
		{} \;

override_dh_fixperms:
	dh_fixperms

	# apps.plugin should only be runnable by the netdata user. It will be
	# given extra capabilities in the postinst script.
	#
	chmod 0754 $(TOP)/usr/lib/$(DEB_HOST_MULTIARCH)/netdata/plugins.d/apps.plugin

override_dh_installlogrotate:
	cp system/netdata.logrotate debian/netdata.logrotate
	dh_installlogrotate

override_dh_clean:
	dh_clean

	# Tidy up copied/generated files
	#
	-[ -r $(CURDIR)/debian/netdata.logrotate ] && rm $(CURDIR)/debian/netdata.logrotate
	-[ -r $(CURDIR)/debian/netdata.postinst ] && rm $(CURDIR)/debian/netdata.postinst
	-[ -r $(CURDIR)/debian/netdata.conffiles ] && rm $(CURDIR)/debian/netdata.conffiles
