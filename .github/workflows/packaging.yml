---
# Handles building of binary packages for the agent.
name: Packages
on:
  # Trigger workflow on branch or tag creation.
  # We filter to only tags later on since we can't here.
  create:
  # Also trigger on pull requests
  # Used to verify package builds
  pull_request:
    branches:
      - master
jobs:
  build:
    name: Build / AMD64
    runs-on: ubuntu-latest
    env:
      # This is the CPU Architecture for the build.
      ARCH: amd64
    strategy:
      matrix:
        platform:
          - debian9
          - debian10
          - ubuntu16.04
          - ubuntu18.04
          - ubuntu20.04
          - centos7
          - centos8
          - fedora31
          - fedora32
          - opensuse15.1
        include:
          - platform: debian9
            distro: debian
            version: "9"
            pkgclouddistro: Debian
            pkgcloudversion: "9.0"
            format: deb
            base_image: debian
          - platform: debian10
            distro: debian
            version: "10"
            pkgclouddistro: Debian
            pkgcloudversion: "10.0"
            format: deb
            base_image: debian
          - platform: ubuntu16.04
            distro: ubuntu
            version: "16.04"
            pkgclouddistro: Ubuntu
            pkgcloudversion: "16.04"
            format: deb
            base_image: ubuntu
          - platform: ubuntu18.04
            distro: ubuntu
            version: "18.04"
            pkgclouddistro: Ubuntu
            pkgcloudversion: "18.04"
            format: deb
            base_image: ubuntu
          - platform: ubuntu20.04
            distro: ubuntu
            version: "20.04"
            pkgclouddistro: Ubuntu
            pkgcloudversion: "20.04"
            format: deb
            base_image: ubuntu
          - platform: centos7
            distro: centos
            version: "7"
            pkgclouddistro: Enterprise Linux
            pkgcloudversion: "7.0"
            format: rpm
            base_image: centos
          - platform: centos8
            distro: centos
            version: "8"
            pkgclouddistro: Enterprise Linux
            pkgcloudversion: "8.0"
            format: rpm
            base_image: centos
          - platform: fedora31
            distro: fedora
            version: "31"
            pkgclouddistro: Fedora
            pkgcloudversion: "31.0"
            format: rpm
            base_image: fedora
          - platform: fedora32
            distro: fedora
            version: "32"
            pkgclouddistro: Fedora
            pkgcloudversion: "32.0"
            format: rpm
            base_image: fedora
          - platform: opensuse15.1
            distro: opensuse
            version: "15.1"
            pkgclouddistro: Fedora
            pkgcloudversion: "15.1"
            format: rpm
            base_image: opensuse/leap
      # We intentiaonally disable the fail-fast behavior so that a
      # build failure for one version doesn't prevent us from publishing
      # successfully built and tested packages for another version.
      fail-fast: false
    steps:
      - name: Checkout PR # Checkout the PR if it's a PR.
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # We need full history for versioning
      - name: Checkout Tag # Otherwise check out the tag that triggered this.
        if: github.event_name == 'create' && github.event.ref_type == 'tag'
        uses: actions/checkout@v2
        with:
          refs: ${{ github.event.ref }}
          fetch-depth: 0 # We need full history for versioning
      - name: Check Base Branch
        if: github.event_name == 'pull_request' || (github.event_name == 'create' && github.event.ref_type == 'tag')
        run: |
          if [ "${{ github.event_name }}" == "create" ]; then
            echo ::set-env name=taggedrun::1
            if ( echo "${{ github.event.ref }}" | grep -Eq '^v[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+-[[:digit:]]{8}.*$' ) && ( git branch --contains tags/${{ github.event.ref }} | grep -q master ) ; then
                echo ::set-env name=tagtpe::nightly
                echo ::set-env name=repo::${{ secrets.PACKAGE_CLOUD_REPO }}-edge
            elif ( echo "${{ github.event.ref }}" | grep -Eq '^v[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$' ) && ( git branch --contains tags/${{ github.event.ref }} | grep -q master ) ; then
                echo ::set-env name=tagtype::release
                echo ::set-env name=repo::${{ secrets.PACKAGE_CLOUD_REPO }}
            else
                echo ::set-env name=tagtype::normal
                echo ::set-env name=repo::${{ secrets.PACKAGE_CLOUD_REPO }}-devel
            fi
          else
            echo ::set-env name=taggedrun::0
          fi
      - name: Prepare Docker Images
        if: github.event_name == 'pull_request' || env.taggedrun == 1
        shell: bash
        run: |
          docker pull ${{ matrix.base_image }}:${{ matrix.version }}
          if [ "${{ matrix.base_image }}" != "${{ matrix.distro }}" ] ; then
            docker tag ${{ matrix.base_image }}:${{ matrix.version }} ${{ matrix.distro }}:${{ matrix.version }}
          fi
      - name: Build
        if: github.event_name == 'pull_request' || env.taggedrun == 1
        shell: bash
        run: |
          # Figure out the package version.
          PKG_VERSION="$(cut -d '-' -f 1 packaging/version)"
          last_commit="$(git log -1 --pretty=format:"%s")"
          if [ "${{ env.taggedrun }}" -eq 1 ] ; then
            PKG_VERSION="$(cut -d '-' -f 1 packaging/version | sed -e 's/-/./g').latest"
          fi
          # Actually build the package.
          docker build . \
              -f packaging/Dockerfile.packager \
              --build-arg DISTRO=${{ matrix.distro }} \
              --build-arg DISTRO_VERSION=${{ matrix.version }} \
              --build-arg VERSION=$PKG_VERSION \
              -t local/package-builder:${{ matrix.distro }}${{ matrix.version }}
          mkdir -p artifacts
          docker run -v $PWD/artifacts:/artifacts local/package-builder:${{ matrix.distro }}${{ matrix.version }}
      - name: Upload
        if: env.taggedrun == 1
        shell: bash
        run: |
          # This figures out the distribution ID for the upload.
          DIST_ID="$(curl https://${{ secrets.PACKAGE_CLOUD_API_TOKEN }}:@packagecloud.io/api/v1/distributions.json | python3 .github/scripts/parse_packagecloud_dist_id.py ${{ matrix.format }} ${{ matrix.pkgclouddistro }} ${{ matrix.pkgcloudversion }})"
          for pkgfile in artifacts/*.${FORMAT} ; do
            curl -F "package[distro_version_id]=${BUILD_ID}" \
                 -F "package[package_file]=@${pkgfile}" \
                 https://${{ secrets.PACKAGE_CLOUD_API_TOKEN }}:@packagecloud.io/api/v1/repos/${{ env.repo }}/packages.json || exit 1
