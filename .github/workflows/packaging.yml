---
# Handles building of binary packages for the agent.
#
# We have one job for each distribution + CPU architecture combination
# we build on. For each distribution, we then use the matrix functionality
# to run separate builds for each version of that distribution we build on.
#
# With GHA, jobs run in parallel by default, as do individual matrix
# instances, so all of these packages build in parallel.
name: Package Builder
on:
  # Trigger on pushes to master.
  push:
    branches:
      - master
  # Also trigger on pull requests
  # Used to verify package builds
  pull_request:
jobs:
  debian: &build
    name: DEB / Debian / AMD64
    runs-on: ubuntu-latest
    env:
      # This defines the distribution name used when selecting docker images.
      DISTRO: debian
      # If this is set, it specifies the upstream docker image name for
      # the base distribution images. This is needed for OpenSUSE because
      # they don't follow proper conventions for image naming.
      # BASE_IMAGE: debian
      # This defines the distribution name used when uploading to
      # PackageCloud (which usually differs from the docker image name.
      PKGCLOUDDISTRO: Debian
      # This defines the package format ('deb' or 'rpm'), used when
      # uploading to PackageCloud.
      FORMAT: deb
      # This is the CPU Architecture for the build.
      ARCH: amd64
      # See the comment below on version numbers for what this does.
      ALIAS_VERSION: 1
    strategy:
      matrix:
        # The version numbers must match up with what PackageCloud uses,
        # meaning that they must include a '.' and a minor version (which
        # is usually zero. We handle the discrepancies this casues
        # for the docker images we use for the package build and test
        # procedure internally when ALIAS_VERSION is defined in the
        # environment.
        versions: [8.0, 9.0, 10.0]
      # We intentiaonally disable the fail-fast behavior so that a
      # build failure for one version doesn't prevent us from publishing
      # successfully built and tested packages for another version.
      fail-fast: false
    steps:
      - name: Check Commit Message
        id: check-commit
        uses: ./.github/commit-filter-action
        with:
          regex: "^\[Package ${{ env.ARCH }} ${{ env.FORMAT }}( ${{ env.DISTRO })?\]"
          case-insensitive: true
      - name: Checkout
        uses: actions/checkout@v1
        if: steps.check-commit.outputs.matched == true
        with:
          fetch-depth: 0 # We need full history for versioning
      - name: Prepare Docker Images
        if: steps.check-commit.outputs.matched == true
        shell: bash
        run: |
          # If we have variables defined for aliasing image names, do so now.
          if [ -n "${BASE_IMAGE}" ] ; then
            docker pull ${BASE_IMAGE}:${{ matrix.version }}
            docker tag ${BASE_IMAGE}:${{ matrix.version }} ${DISTRO}:${{ matrix.version }}
          fi
          # Create apropriate aliases for the Docker image version.
          if [ -n "${ALIAS_VERSION}" ] ; then
            docker pull ${DISTRO}:$(echo ${{ matrix.version }} | cut -f 1 -d '.')
            docker tag ${DISTRO}:$(echo ${{ matrix.version }} | cut -f 1 -d '.') ${DISTRO}:${{ matrix.version }}
          else
            docker pull ${DISTRO}:${{ matrix.version }}
          fi
      - name: Build
        if: steps.check-commit.outputs.matched == true || github.event_name == 'pull_request'
        shell: bash
        run: |
          # Figure out the package version.
          PKG_VERSION="$(cut -d '-' -f 1 packaging/version)"
          last_commit="$(git log -1 --pretty=format:"%s")"
          if echo "${last_commit}" | grep -qiE "\[build latest\]" ; then
            PKG_VERSION="$(cut -d '-' -f 1 packaging/version | sed -e 's/-/./g').latest"
          fi
          # Actually build the package.
          docker build . \
              -f packaging/Dockerfile.packaging \
              --build-arg DISTRO=${DISTRO} \
              --build-arg DISTRO_VERSION=${{ matrix.version }} \
              --build-arg VERSION=$PKG_VERSION \
              -t local/package-builder:${DISTRO}${{ matrix.version }}
          mkdir -p artifacts
          docker run -it -v $PWD/artifacts:/artifacts local/package-builder:${DISTRO}${{ matrix.version }}
      - name: Upload
        if: steps.check-commit.outputs.matched == true && github.event_name != 'pull_request'
        shell: bash
        run: |
          # This figures out the distribution ID for the upload.
          DIST_ID="$(curl https://${{ secrets.PACKAGE_CLOUD_API_TOKEN }}:@packagecloud.io/api/v1/distributions.json | python3 .github/parse_packagecloud_dist_id.py ${FORMAT} ${PKGCLOUDDISTRO} ${{ matrix.version }})"
          last_commit="$(git log -1 --pretty=format:"%s")"
          REPO="${{ secrets.PACKAGE_CLOUD_REPO }}"
          if echo "${last_commit}" | grep -qiE "\[build latest\]" ; then
            REPO="${REPO}-edge"
          fi
          for pkgfile in artifacts/*.${FORMAT} ; do
            curl -F "package[distro_version_id]=${BUILD_ID}" \
                 -F "package[package_file]=@${pkgfile}" \
                 https://${{ secrets.PACKAGE_CLOUD_API_TOKEN }}:@packagecloud.io/api/v1/repos/${{ secrets.PACKAGE_CLOUD_REPO }}/packages.json || exit 1

  ubuntu:
    <<: *build
    name: DEB / Ubuntu / amd64
    env:
      DISTRO: ubuntu
      PKGCLOUDDISTRO: Ubuntu
      FORMAT: deb
      ARCH: amd64
    strategy:
      matrix:
        versions: [16.04, 18.04, 19.04, 19.10]
      fail-fast: false

  fedora:
    <<: *build
    name: RPM / Fedora / amd64
    env:
      DISTRO: fedora
      PKGCLOUDDISTRO: Fedora
      FORMAT: rpm
      ARCH: amd64
      ALIAS_VERSION: 1
    strategy:
      matrix:
        versions: [29.0, 30.0, 31.0]
      fail-fast: false

  centos:
    <<: *build
    name: RPM / CentOS & RHEL / amd64
    env:
      DISTRO: centos
      PKGCLOUDDISTRO: Enterprise Linux
      FORMAT: rpm
      ARCH: amd64
      ALIAS_VERSION: 1
    strategy:
      matrix:
        versions: [7.0, 8.0]
      fail-fast: false

  centos:
    <<: *build
    name: RPM / OpenSUSE / amd64
    env:
      DISTRO: opensuse
      PKGCLOUDDISTRO: Enterprise Linux
      BASE_IMAGE: opensuse/leap
      FORMAT: rpm
      ARCH: amd64
    strategy:
      matrix:
        versions: [15.0, 15.1]
      fail-fast: false
